# -*- coding: utf-8 -*-

# lunarc configuration file
# configuration file with sample list (ya# ml list)

import os

WD = "TBI/03.05.22/"
configfile: os.path.join(WD, "src/config_files/config.yaml")

CLUSTER = config["clusters"]
cluster_sizes = {i : 1e+7/sum(1 for line in open("../3_combinedUMAP_perCluster_perCondition/" + i + ".tsv")) for i in config["clusters"]}
config.update(cluster_sizes)

# Run as:
# snakemake -j 5 --cluster-config TBI/03.05.22/src/config_files/lunarc_config.json --cluster "sbatch -A {cluster.account} -p {cluster.partition} --tasks-per-node {cluster.tasks-per-node}  -t {cluster.time} -o {cluster.output} -e {cluster.error} -J {cluster.job-name} -N {cluster.nodes}" --latency-wait 60

rule all:
    input:
        os.path.join(WD, "deeptools/upreg_ERVs/upreg_ERVs_negative_sr.mtx"), 
        os.path.join(WD, "deeptools/FL_ERVs/FL_HERVH_negative_sr.mtx"),
        os.path.join(WD, "deeptools/FL_L1PAs/FL_L1PAs_negative_strand.mtx"),
        os.path.join(WD, "deeptools/housekeeping/housekeeping_negative.mtx")


rule indexing:
    input:
        os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.bam")
    output:
        os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.bam.bai")
    shell:
        """
        ml GCC/7.3.0-2.30 SAMtools/1.9        
        samtools index -b {input}

        module purge
        """

rule bigwig:
    input:
        os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.bam"),    
        os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.bam.bai"),
    output:
        os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.bw")
    params:
        cluster_size = lambda wildcards: config[wildcards.cluster]
    shell:
        """
        module purge
        ml GCC/5.4.0-2.26  OpenMPI/1.10.3
        ml Python/3.5.2
            
        bamCoverage --scaleFactor {params.cluster_size} -b {input[0]} -o {output}

        module purge
        """

rule filterStrand:
    input:
        os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.bam"),
        os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.bam.bai")
    output:
        os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.forward.bw"),
        os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.reverse.bw")
    params:
        cluster_size = lambda wildcards: config[wildcards.cluster]
    shell:
        """
        ml GCC/5.4.0-2.26  OpenMPI/1.10.3 Python/3.5.2
        
        # bamCoverage filterRNAstrand assumes a standard dUTP-based library preparation (that is, â€“filterRNAstrand=forward keeps minus-strand reads, which originally came from genes on the forward strand using a dUTP-based method). Since 10x libraries are not dUTP (-s 2) but forwardly sequence (-s 1), I've assigned what comes out here as "forward" to the reverse transcription file and viceversa.
        bamCoverage --scaleFactor {params.cluster_size} --filterRNAstrand forward -b {input[0]} -o {output[1]} # Reverse transcription
        bamCoverage --scaleFactor {params.cluster_size} --filterRNAstrand reverse -b {input[0]} -o {output[0]} # Forward transcription
        module purge
        """

rule matrix_FL_L1PAs:
    input:
        forward_strand_r1 = expand(os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.forward.bw"), cluster=CLUSTER),
        reverse_strand_r1 = expand(os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.reverse.bw"), cluster=CLUSTER),
        regions="/projects/fs3/jakobssonlab/annotations/hg38/rmsk/hg38.fa.fulllength.L1HS_L1PA.bed"
    output:
        positive = os.path.join(WD, "deeptools/FL_L1PAs/FL_L1PAs_positive_strand.mtx"),
        reverse = os.path.join(WD, "deeptools/FL_L1PAs/FL_L1PAs_negative_strand.mtx")
    shell:
        """
        grep L1HS {input.regions}  > L1HS_FL.bed
        grep L1PA2 {input.regions}  > L1PA2_FL.bed
        grep L1PA3 {input.regions}  > L1PA3_FL.bed
        grep L1PA4 {input.regions}  > L1PA4_FL.bed
        
        negative_l1hs=regions_negative_l1hs.bed
        positive_l1hs=regions_positive_l1hs.bed

        awk '(NR>1)' L1HS_FL.bed | awk '{{if($6 == "-"){{print $0}}}}' > $negative_l1hs
        awk '(NR>1)' L1HS_FL.bed | awk '{{if($6 == "+"){{print $0}}}}' > $positive_l1hs

        negative_l1pa2=regions_negative_l1pa2.bed
        positive_l1pa2=regions_positive_l1pa2.bed

        awk '(NR>1)' L1PA2_FL.bed | awk '{{if($6 == "-"){{print $0}}}}' > $negative_l1pa2
        awk '(NR>1)' L1PA2_FL.bed | awk '{{if($6 == "+"){{print $0}}}}' > $positive_l1pa2

        negative_l1pa3=regions_negative_l1pa3.bed
        positive_l1pa3=regions_positive_l1pa3.bed

        awk '(NR>1)' L1PA3_FL.bed | awk '{{if($6 == "-"){{print $0}}}}' > $negative_l1pa3
        awk '(NR>1)' L1PA3_FL.bed | awk '{{if($6 == "+"){{print $0}}}}' > $positive_l1pa3

        negative_l1pa4=regions_negative_l1pa4.bed
        positive_l1pa4=regions_positive_l1pa4.bed

        awk '(NR>1)' L1PA4_FL.bed | awk '{{if($6 == "-"){{print $0}}}}' > $negative_l1pa4
        awk '(NR>1)' L1PA4_FL.bed | awk '{{if($6 == "+"){{print $0}}}}' > $positive_l1pa4

        ml GCC/7.3.0-2.30  OpenMPI/3.1.1 deepTools/2.5.4-Python-3.6.6        
        
        computeMatrix scale-regions -R $positive_l1hs $positive_l1pa2 $positive_l1pa3 $positive_l1pa4 -S {input.forward_strand_r1} {input.reverse_strand_r1} --regionBodyLength 6000 -b 6000 -a 6000 -o {output.positive} 
        computeMatrix scale-regions -R $negative_l1hs $negative_l1pa2 $negative_l1pa3 $negative_l1pa4 -S {input.reverse_strand_r1} {input.forward_strand_r1} --regionBodyLength 6000 -b 6000 -a 6000 -o {output.reverse}

        """

rule matrix_upreg_ERVs:
    input:
        forward = expand(os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.forward.bw"), cluster=CLUSTER),
        reverse = expand(os.path.join(WD, "3_combinedUMAP_perCluster/clusterPipeline_per_condition/map_cluster/unique/{cluster}_Aligned.sortedByCoord.out.reverse.bw"), cluster=CLUSTER),
        regions=os.path.join(WD, "deeptools/upreg_ERVs/upreg_ERVs_TBI.bed")
    output:
        regions_positive_ervs = os.path.join(WD, "deeptools/upreg_ERVs/upreg_ERVs_TBI_positive.bed"),
        regions_negative_ervs = os.path.join(WD, "deeptools/upreg_ERVs/upreg_ERVs_TBI_negative.bed"),
        positive_ervs = os.path.join(WD, "deeptools/upreg_ERVs/upreg_ERVs_positive_sr.mtx"),
        negative_ervs = os.path.join(WD, "deeptools/upreg_ERVs/upreg_ERVs_negative_sr.mtx")
    shell:
        """
        ml GCC/10.2.0 BEDTools/2.30.0 

        awk '{{if($6 == "+"){{print $0}}}}' OFS="\t" {input.regions} > {output.regions_positive_ervs}
        awk '{{if($6 == "-"){{print $0}}}}' OFS="\t" {input.regions} > {output.regions_negative_ervs}

        module purge

        ml GCC/5.4.0-2.26  OpenMPI/1.10.3 Python/3.5.2

        computeMatrix scale-regions -R {output.regions_positive_ervs} -S {input.forward} {input.reverse} -b 9000 -a 9000 --regionBodyLength 9500 -o {output.positive_ervs} 
        computeMatrix scale-regions -R {output.regions_negative_ervs} -S {input.reverse} {input.forward} -b 9000 -a 9000 --regionBodyLength 9500 -o {output.negative_ervs} 

        module purge
        """


